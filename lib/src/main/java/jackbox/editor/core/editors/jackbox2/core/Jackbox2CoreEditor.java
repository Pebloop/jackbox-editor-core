/**
 * This Java source file was generated by the Gradle 'init' task.
 */
package jackbox.editor.core.editors.jackbox2.core;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jpexs.decompiler.flash.SWF;
import jackbox.editor.core.editors.jackbox2.core.form.JackBox2CoreContentForm;
import jackbox.editor.core.editors.jackbox2.core.form.JackBox2CoreGamePickerForm;
import jackbox.editor.core.editors.jackbox2.core.form.JackBox2CorePauseDialogForm;
import jackbox.editor.core.editors.jackbox2.core.models.ContentJsonModel;
import jackbox.editor.core.utils.SwfEditor;

import java.io.*;

/**
 * This class is used to edit the core (main menu) part of Jackbox Party Pack 2
 */
public class Jackbox2CoreEditor {
    SWF swfGamePicker;
    SWF swfPauseDialog;
    ContentJsonModel jsonContent;

    public Jackbox2CoreEditor() throws IOException, InterruptedException {
    }

    // GamePicker

    /**
     * Setup the GamePicker SWF file
     * This file can be found at The Jackbox Party Pack 2/games/PartyPack/GamePicker.swf
     *
     * @param fileGamePicker The GamePicker SWF file
     * @throws IOException          If an I/O error occurs
     * @throws InterruptedException If the thread is interrupted
     */
    public void setSwfGamePicker(InputStream fileGamePicker) throws IOException, InterruptedException {
        this.swfGamePicker = new SWF(fileGamePicker, true);
    }

    /**
     * Setup the content JSON file
     * This file can be found at Jackbox Party Pack 2/games/PartyPack/content.json
     *
     * @param fileContent The content json file
     * @throws IOException          If an I/O error occurs
     * @throws InterruptedException If the thread is interrupted
     */
    public void setJsonContent(InputStream fileContent) throws IOException, InterruptedException {
        byte[] bytes = fileContent.readAllBytes();
        this.jsonContent = new ObjectMapper().readValue(bytes, ContentJsonModel.class);
    }

    /**
     * Setup the PauseDialog SWF file
     * This file can be found at The Jackbox Party Pack 2/PauseDialog.swf
     *
     * @param filePauseDialog The PauseDialog SWF file
     * @throws IOException          If an I/O error occurs
     * @throws InterruptedException If the thread is interrupted
     */
    public void setSwfPauseDialog(InputStream filePauseDialog) throws IOException, InterruptedException {
        this.swfPauseDialog = new SWF(filePauseDialog, true);
    }

    /**
     * Get the GamePicker.swf editable data
     *
     * @return The data in a json format
     */
    public String getGamePickerData() throws Exception {

        JackBox2CoreGamePickerForm form = new JackBox2CoreGamePickerForm();
        SwfEditor swfEditor = new SwfEditor(this.swfGamePicker);

        //Process all text tags
        form.back = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.BACK);
        form.phoneOrTablet = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.PHONE_OR_TABLET);
        form.familyMode = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.FAMILY_MODE);
        form.optionalContentFilter = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.OPTIONAL_CONTENT_FILTER);
        form.audience = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.AUDIENCE);
        form.nonPlayerCanJoin = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.NON_PLAYER_CAN_JOIN);
        form.menuItem = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.MENU_ITEM);
        form.close = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.CLOSE[0]);
        form.on = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.ON);
        form.off = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.OFF);
        form.volumeControl = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.VOLUME_CONTROL[0]);
        form.audienceMode = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.AUDIENCE_MODE[0]);
        form.audienceTimer = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.AUDIENCE_TIMER[0]);
        form.familyFriendlyFilter = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.FAMILY_FRIENDLY_FILTER[0]);
        form.fullScreenMode = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.GamePicker.FULL_SCREEN_MODE[0]);

        //Get scripts
        /*List<ScriptPack> scriptPacks =
                this.swfGamePicker.getAS3Packs();
        System.out.println("scripts : " + scriptPacks.size());
        for (ScriptPack scriptPack : scriptPacks) {
            int strings = scriptPack.abc.constants.getStringCount();
            System.out.println(strings);
            for (int i = 0; i < strings; i++) {
                String string = scriptPack.abc.constants.getString(i);
                System.out.println(string);
            }
        }*/

        String json = new ObjectMapper().writeValueAsString(form);
        return json;
    }

    /**
     * Get the setting image stored in the GamePicker.swf file
     *
     * @return The image
     */
    public byte[] getGamePickerImageSettings() throws Exception {
        SwfEditor swfEditor = new SwfEditor(this.swfGamePicker);
        return swfEditor.getDefineBitsLosslessTag(Jackbox2CoreIds.GamePicker.IMAGE_SETTINGS);
    }

    /**
     * Get the instruction image stored in the GamePicker.swf file
     *
     * @return The image
     */
    public byte[] getGamePickerImageInstructions() throws Exception {
        SwfEditor swfEditor = new SwfEditor(this.swfGamePicker);
        return swfEditor.getDefineBitsLosslessTag(Jackbox2CoreIds.GamePicker.IMAGE_INSTRUCTIONS);
    }

    /**
     * Get the instruction2 image stored in the GamePicker.swf file
     *
     * @return The image
     */
    public byte[] getGamePickerImageInstructions2() throws Exception {
        SwfEditor swfEditor = new SwfEditor(this.swfGamePicker);
        return swfEditor.getDefineBitsLosslessTag(Jackbox2CoreIds.GamePicker.IMAGE_INSTRUCTION2);
    }

    /**
     * Modify the GamePicker.swf file
     *
     * @param json The data in a json format
     * @return The modified file
     */
    public byte[] modifyGamePickerData(String json) throws Exception {
        JackBox2CoreGamePickerForm form = new ObjectMapper().readValue(json, JackBox2CoreGamePickerForm.class);
        SwfEditor swfEditor = new SwfEditor(this.swfGamePicker);

        //Process all tags
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.GamePicker.BACK, form.back);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.GamePicker.PHONE_OR_TABLET, form.phoneOrTablet);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.GamePicker.FAMILY_MODE, form.familyMode);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.GamePicker.OPTIONAL_CONTENT_FILTER, form.optionalContentFilter);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.GamePicker.AUDIENCE, form.audience);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.GamePicker.NON_PLAYER_CAN_JOIN, form.nonPlayerCanJoin);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.GamePicker.MENU_ITEM, form.menuItem);
        swfEditor.setDefineEditTextTags(Jackbox2CoreIds.GamePicker.CLOSE, form.close);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.GamePicker.ON, form.on);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.GamePicker.OFF, form.off);

        swfEditor.setDefineEditTextTags(Jackbox2CoreIds.GamePicker.VOLUME_CONTROL, form.volumeControl);
        swfEditor.setDefineEditTextTags(Jackbox2CoreIds.GamePicker.AUDIENCE_MODE, form.audienceMode);
        swfEditor.setDefineEditTextTags(Jackbox2CoreIds.GamePicker.AUDIENCE_TIMER, form.audienceTimer);
        swfEditor.setDefineEditTextTags(Jackbox2CoreIds.GamePicker.FAMILY_FRIENDLY_FILTER, form.familyFriendlyFilter);
        swfEditor.setDefineEditTextTags(Jackbox2CoreIds.GamePicker.FULL_SCREEN_MODE, form.fullScreenMode);

        //Save SWF
        return swfEditor.apply();
    }

    /**
     * Modify the setting image of the GamePicker.swf file
     *
     * @param image The image
     * @return The modified file
     */
    public byte[] modifyGamePickerImageSettings(byte[] image) throws Exception {
        SwfEditor swfEditor = new SwfEditor(this.swfGamePicker);
        swfEditor.setDefineBitsLosslessTag(Jackbox2CoreIds.GamePicker.IMAGE_SETTINGS, image);
        return swfEditor.apply();
    }

    /**
     * Modify the instruction image of the GamePicker.swf file
     *
     * @param image The image
     * @return The modified file
     */
    public byte[] modifyGamePickerImageInstructions(byte[] image) throws Exception {
        SwfEditor swfEditor = new SwfEditor(this.swfGamePicker);
        swfEditor.setDefineBitsLosslessTag(Jackbox2CoreIds.GamePicker.IMAGE_INSTRUCTIONS, image);
        return swfEditor.apply();
    }

    /**
     * Modify the instruction2 image of the GamePicker.swf file
     *
     * @param image The image
     * @return The modified file
     */
    public byte[] modifyGamePickerImageInstructions2(byte[] image) throws Exception {
        SwfEditor swfEditor = new SwfEditor(this.swfGamePicker);
        swfEditor.setDefineBitsLosslessTag(Jackbox2CoreIds.GamePicker.IMAGE_INSTRUCTION2, image);
        return swfEditor.apply();
    }

    // Pause dialog
    /**
     * Get the PauseDialog.swf editable data
     *
     * @return The data in a json format
     */
    public String getPauseDialogData() throws Exception {
        JackBox2CorePauseDialogForm form = new JackBox2CorePauseDialogForm();
        SwfEditor swfEditor = new SwfEditor(this.swfPauseDialog);

        //Get texts
        form.yes = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.PauseDialog.YES[0]);
        form.no = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.PauseDialog.NO[0]);
        form.are_you_sure_exit = swfEditor.getDefineTextTag(Jackbox2CoreIds.PauseDialog.ARE_YOU_SURE_EXIT);
        form.current_progress_lost = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.PauseDialog.CURRENT_PROGRESS_LOST);
        form.choose_on_your_device = swfEditor.getDefineEditTextTag(Jackbox2CoreIds.PauseDialog.CHOOSE_ON_YOUR_DEVICE);

        return new ObjectMapper().writeValueAsString(form);
    }

    /**
     * Modify the PauseDialog.swf file
     *
     * @param json The data in a json format
     * @return The modified file
     */
    public byte[] modifyPauseDialogData(String json) throws Exception {
        JackBox2CorePauseDialogForm form = new ObjectMapper().readValue(json, JackBox2CorePauseDialogForm.class);
        SwfEditor swfEditor = new SwfEditor(this.swfPauseDialog);

        //Process all tags
        swfEditor.setDefineEditTextTags(Jackbox2CoreIds.PauseDialog.YES, form.yes);
        swfEditor.setDefineEditTextTags(Jackbox2CoreIds.PauseDialog.NO, form.no);
        swfEditor.setDefineTextTag(Jackbox2CoreIds.PauseDialog.ARE_YOU_SURE_EXIT, form.are_you_sure_exit);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.PauseDialog.CURRENT_PROGRESS_LOST, form.current_progress_lost);
        swfEditor.setDefineEditTextTag(Jackbox2CoreIds.PauseDialog.CHOOSE_ON_YOUR_DEVICE, form.choose_on_your_device);

        //Save SWF
        return swfEditor.apply();
    }

    // content
    /**
     * Get the content.json editable data
     *
     * @return The data in a json format
     */
    public String getContentData() throws Exception {
        JackBox2CoreContentForm form = new JackBox2CoreContentForm();

        //Get texts
        form.fibbage2Players = this.jsonContent.games[0].players;
        form.fibbage2Description = this.jsonContent.games[0].description;
        form.earwaxPlayers = this.jsonContent.games[1].players;
        form.earwaxDescription = this.jsonContent.games[1].description;
        form.bidiotsPlayers = this.jsonContent.games[2].players;
        form.bidiotsDescription = this.jsonContent.games[2].description;
        form.quiplashPlayers = this.jsonContent.games[3].players;
        form.quiplashDescription = this.jsonContent.games[3].description;
        form.bombCorpPlayers = this.jsonContent.games[4].players;
        form.bombCorpDescription = this.jsonContent.games[4].description;

        return new ObjectMapper().writeValueAsString(form);
    }

    /**
     * Modify the content.json file
     *
     * @param json The data in a json format
     * @return The modified file
     */
    public byte[] modifyContentData(String json) throws Exception {
        JackBox2CoreContentForm form = new ObjectMapper().readValue(json, JackBox2CoreContentForm.class);

        //Process all tags
        this.jsonContent.games[0].players = form.fibbage2Players;
        this.jsonContent.games[0].description = form.fibbage2Description;
        this.jsonContent.games[1].players = form.earwaxPlayers;
        this.jsonContent.games[1].description = form.earwaxDescription;
        this.jsonContent.games[2].players = form.bidiotsPlayers;
        this.jsonContent.games[2].description = form.bidiotsDescription;
        this.jsonContent.games[3].players = form.quiplashPlayers;
        this.jsonContent.games[3].description = form.quiplashDescription;
        this.jsonContent.games[4].players = form.bombCorpPlayers;
        this.jsonContent.games[4].description = form.bombCorpDescription;

        //Save SWF
        return new ObjectMapper().writeValueAsString(this.jsonContent).getBytes();
    }


}
